inv
x=rbind(c(1,-1/4), c(-1/4,1))
m= makeCacheMatrix(x)
m$get()
B<-matrix(c(1,2,3,4),2,2)
B1<-makeCachematrix(B)
B1<-makeCacheMatrix(B)
m
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
m
makeCacheMatrix <-function(x = matrix()) {
i <- NULL
set <- function(y) {
m <<- matrix
i <<- NULL
}
get <- function() {
m
}
setInverse <- function(inverse) {
i <<- inverse
}
getinverse<- function() {
i
}
list(set=set, get=get, setInverse=setInverse, getInverse=getInverse)
}
B<-matrix(c(1,2,3,4),2,2)
B1<-makeCacheMatrix(B)
cacheSolve(B1)
x= rbind(c(1, -1/4), c(-1/4,1))
m=makeCacheMatrix(x)
getInverse<- function() {
i
}
set <- function(matrix) {
m <<- matrix
i <<- NULL
}
x=rbind(c(1,-1/4), c(-1/4,1))
m=makeCacheMatrix(x)
m$get()
cacheSolve(m)
x$setinverse(inv)
cacheSolve <- function(x, ...) {
inv <- x$getInverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <-x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
}
inv
inv <- x$getinverse()
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <-x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
x = rbind(c(1, -1/4), c(-1/4, 1))
m = makeCacheMatrix(x)
m$get()
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
makeCacheMatrix <-function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse<- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
# Return the matrix
inv
## Initialize the inverse property
inv <- NULL
## A method to set the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
> B <- matrix(c(1,2,3,4),2,2)
> B1 <- makeCacheMatrix(B)
> cacheSolve(B1)
> B <- matrix(c(1,2,3,4),2,2)
> B1 <- makeCacheMatrix(B)
> cacheSolve(B1)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
## Return the matrix
inverseproperty
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseproperty <- x$getinverse()
## Just return the inverse if its already set
if(!is.null(inverseproperty)) {
message("getting cached data.")
return(inverseproperty)
}
## Get the matrix from the object
data <-x$get()
## Calculate the inverse using matrix multiplication
inverseproperty <- solve(data)
## Set the inverse to the object
x$setinverse(inverseproperty)
## Return the matrix
inverseproperty
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inverseproperty <- x$getinverse()
## Just return the inverse if its already set
if(!is.null(inverseproperty)) {
message("getting cached data.")
return(inverseproperty)
}
## Get the matrix from the object
data <-x$get()
## Calculate the inverse using matrix multiplication
inverseproperty <- solve(data)
## Set the inverse to the object
x$setinverse(inverseproperty)
## Return the matrix
inverseproperty
}
B <- matrix(c(1,2,3,4),2,2)
B1 <- makeCacheMatrix(B)
cacheSolve(B1)
